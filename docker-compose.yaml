services:
  web:
    build: .
    volumes:
      - .:/app
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
    restart: always
    networks:
      - default          
      - traefik-public
    labels:
      # --- การตั้งค่าหลักสำหรับ Traefik ---
      - "traefik.enable=true"
      - "traefik.docker.network=traefik-public"

      # --- 1. ตั้งค่า Router: กำหนดเงื่อนไขการรับ request ---
      - "traefik.http.routers.vfit-web-router.rule=PathPrefix(`/s65114540596`)"
      - "traefik.http.routers.vfit-web-router.entrypoints=web"
      # ระบุให้ Router นี้ใช้ Middleware ที่เราจะสร้างในข้อ 2
      - "traefik.http.routers.vfit-web-router.middlewares=vfit-stripprefix-middleware@docker"

      # --- 2. ตั้งค่า Middleware: แปลง request ก่อนส่งต่อ ---
      # สร้าง Middleware เพื่อ "ตัด" /s65114540596 ออกจาก URL
      - "traefik.http.middlewares.vfit-stripprefix-middleware.stripprefix.prefixes=/s65114540596"

      # --- 3. ตั้งค่า Service: กำหนดปลายทางของ request ---
      # ระบุให้ Traefik ส่ง request ไปยัง port 8000 ของ container นี้
      - "traefik.http.services.s65114540596.loadbalancer.server.port=8000"

  db:
    image: postgres:16
    restart: always
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}     
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 20
    networks:
      - default

volumes:
  pg_data:

networks:
  default:
    driver: bridge
  traefik-public:
    external: true
